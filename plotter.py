"""Helper class for plotting."""
import matplotlib.pyplot as plt
import constrainthg

plt.rcParams['font.family'] = 'times'

def plotTimeValues(labels: list, found_values: dict, time_step: float, 
                   title: str='Simulation'):
    """Plots the values in the dictionary as a function of time.
    
    Parameters
    ----------
    labels : List[str, | Node,]
        A list of node labels to plot, either as strings or the Node objects.
    found_values : Dict{label : list}
        A list of values found for a given node label, generated by Hypergraph.solve()
    time_step : float | str
        The time step for the simulation used for calculating times, or the label of 
        the time node in the `found_values` parameter.
    title : str, optional
        The title of the plot.
    """
    dashes = ['--', ':', '-.']
    legend = []
    if isinstance(time_step, str):
        times = found_values[time_step]
    for label in labels:
        dash = dashes[labels.index(label) % len(dashes)]
        if isinstance(label, constrainthg.Node):
            legend_label = label.label + f', ({label.units})' if label.units is not None else ''
            label = label.label
        else:
            legend_label = label
        values = found_values[label]
        if not isinstance(time_step, str):
            times = [time_step * i for i in range(len(values))]
        plt.plot(times[:len(values)], values[:len(times)], 'k', lw=2, linestyle=dash) 
        legend.append(legend_label)
    plt.legend(legend)
    plt.ylabel('Variables')
    plt.xlabel('Time (hours)')
    plt.title(title)
    plt.show()